{"ast":null,"code":"module.exports = register;\n\nfunction register(state, name, method, options) {\n  if (typeof method !== \"function\") {\n    throw new Error(\"method for before hook must be a function\");\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (Array.isArray(name)) {\n    return name.reverse().reduce(function (callback, name) {\n      return register.bind(null, state, name, callback, options);\n    }, method)();\n  }\n\n  return Promise.resolve().then(function () {\n    if (!state.registry[name]) {\n      return method(options);\n    }\n\n    return state.registry[name].reduce(function (method, registered) {\n      return registered.hook.bind(null, method, options);\n    }, method)();\n  });\n}","map":{"version":3,"sources":["E:/Workspace/on-boarding-off-boarding/Organization Manager/node_modules/before-after-hook/lib/register.js"],"names":["module","exports","register","state","name","method","options","Error","Array","isArray","reverse","reduce","callback","bind","Promise","resolve","then","registry","registered","hook"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AAEA,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,MAAI,CAACD,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIE,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAI,CAACM,OAAL,GAAeC,MAAf,CAAsB,UAAUC,QAAV,EAAoBR,IAApB,EAA0B;AACrD,aAAOF,QAAQ,CAACW,IAAT,CAAc,IAAd,EAAoBV,KAApB,EAA2BC,IAA3B,EAAiCQ,QAAjC,EAA2CN,OAA3C,CAAP;AACD,KAFM,EAEJD,MAFI,GAAP;AAGD;;AAED,SAAOS,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxC,QAAI,CAACb,KAAK,CAACc,QAAN,CAAeb,IAAf,CAAL,EAA2B;AACzB,aAAOC,MAAM,CAACC,OAAD,CAAb;AACD;;AAED,WAAOH,KAAK,CAACc,QAAN,CAAeb,IAAf,EAAqBO,MAArB,CAA4B,UAAUN,MAAV,EAAkBa,UAAlB,EAA8B;AAC/D,aAAOA,UAAU,CAACC,IAAX,CAAgBN,IAAhB,CAAqB,IAArB,EAA2BR,MAA3B,EAAmCC,OAAnC,CAAP;AACD,KAFM,EAEJD,MAFI,GAAP;AAGD,GARM,CAAP;AASD","sourcesContent":["module.exports = register;\n\nfunction register(state, name, method, options) {\n  if (typeof method !== \"function\") {\n    throw new Error(\"method for before hook must be a function\");\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (Array.isArray(name)) {\n    return name.reverse().reduce(function (callback, name) {\n      return register.bind(null, state, name, callback, options);\n    }, method)();\n  }\n\n  return Promise.resolve().then(function () {\n    if (!state.registry[name]) {\n      return method(options);\n    }\n\n    return state.registry[name].reduce(function (method, registered) {\n      return registered.hook.bind(null, method, options);\n    }, method)();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}