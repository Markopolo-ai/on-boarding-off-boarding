{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { scale } from \"./tooltip.transition\";\nimport { useTooltip } from \"./use-tooltip\";\nvar StyledTooltip = chakra(motion.div);\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\n\nexport var Tooltip = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyleConfig(\"Tooltip\", props);\n  var ownProps = omitThemingProps(props);\n\n  var {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\", \"bg\", \"portalProps\"]);\n\n  if (bg) {\n    styles.bg = bg;\n  }\n\n  var tooltip = useTooltip(rest);\n  var shouldWrap = isString(children) || shouldWrapChildren;\n  var trigger;\n\n  if (shouldWrap) {\n    trigger = /*#__PURE__*/React.createElement(chakra.span, _extends({\n      tabIndex: 0\n    }, tooltip.getTriggerProps()), children);\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    var child = React.Children.only(children);\n    trigger = /*#__PURE__*/React.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n\n  var hasAriaLabel = !!ariaLabel;\n\n  var _tooltipProps = tooltip.getTooltipProps({}, ref);\n\n  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  var hiddenProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n\n  if (!label) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, /*#__PURE__*/React.createElement(AnimatePresence, null, tooltip.isOpen && /*#__PURE__*/React.createElement(Portal, portalProps, /*#__PURE__*/React.createElement(chakra.div, _extends({}, tooltip.getTooltipPositionerProps(), {\n    __css: {\n      zIndex: styles.zIndex,\n      pointerEvents: \"none\"\n    }\n  }), /*#__PURE__*/React.createElement(StyledTooltip, _extends({\n    variants: scale\n  }, tooltipProps, {\n    initial: \"exit\",\n    animate: \"enter\",\n    exit: \"exit\",\n    __css: styles\n  }), label, hasAriaLabel && /*#__PURE__*/React.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow-wrapper\"\n  }, tooltip.getArrowWrapperProps()), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow\"\n  }, tooltip.getArrowProps(), {\n    __css: {\n      bg: styles.bg\n    }\n  }))))))));\n});\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n}","map":{"version":3,"sources":["../../src/tooltip.tsx"],"names":["StyledTooltip","chakra","motion","Tooltip","forwardRef","styles","useStyleConfig","ownProps","omitThemingProps","portalProps","rest","tooltip","useTooltip","shouldWrap","isString","trigger","child","React","hasAriaLabel","_tooltipProps","tooltipProps","omit","hiddenProps","pick","zIndex","pointerEvents","scale","hasArrow","bg"],"mappings":"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","sourcesContent":["import { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { scale } from \"./tooltip.transition\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Tooltip\">,\n    UseTooltipProps {\n  /**\n   * The react component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: React.ReactNode\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap its children\n   * in a `<span/>` with `tabIndex=0`\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   */\n  hasArrow?: boolean\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n}\n\nconst StyledTooltip = chakra(motion.div)\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps,\n    ...rest\n  } = ownProps\n\n  if (bg) {\n    styles.bg = bg\n  }\n\n  const tooltip = useTooltip(rest)\n\n  const shouldWrap = isString(children) || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span tabIndex={0} {...tooltip.getTriggerProps()}>\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = React.Children.only(children) as React.ReactElement & {\n      ref?: React.Ref<any>\n    }\n    trigger = React.cloneElement(\n      child,\n      tooltip.getTriggerProps(child.props, child.ref),\n    )\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = tooltip.getTooltipProps({}, ref)\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const hiddenProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      <AnimatePresence>\n        {tooltip.isOpen && (\n          <Portal {...portalProps}>\n            <chakra.div\n              {...tooltip.getTooltipPositionerProps()}\n              __css={{\n                zIndex: styles.zIndex,\n                pointerEvents: \"none\",\n              }}\n            >\n              <StyledTooltip\n                variants={scale}\n                {...(tooltipProps as any)}\n                initial=\"exit\"\n                animate=\"enter\"\n                exit=\"exit\"\n                __css={styles}\n              >\n                {label}\n                {hasAriaLabel && (\n                  <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>\n                )}\n                {hasArrow && (\n                  <chakra.div\n                    className=\"chakra-tooltip__arrow-wrapper\"\n                    {...tooltip.getArrowWrapperProps()}\n                  >\n                    <chakra.div\n                      className=\"chakra-tooltip__arrow\"\n                      {...tooltip.getArrowProps()}\n                      __css={{ bg: styles.bg }}\n                    />\n                  </chakra.div>\n                )}\n              </StyledTooltip>\n            </chakra.div>\n          </Portal>\n        )}\n      </AnimatePresence>\n    </>\n  )\n})\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\"\n}\n"]},"metadata":{},"sourceType":"module"}