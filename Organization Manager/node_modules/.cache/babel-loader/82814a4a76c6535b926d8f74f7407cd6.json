{"ast":null,"code":"// Original licensing for the following methods can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/calvellido/focus-options-polyfill\n// See https://github.com/adobe/react-spectrum\nimport { getOwnerDocument } from \"./dom\";\nimport { isHTMLElement } from \"./tabbable\";\n\nfunction isInputElement(element) {\n  return isHTMLElement(element) && element.tagName.toLowerCase() === \"input\" && \"select\" in element;\n}\n\nfunction getActiveElement(element) {\n  var doc = element instanceof HTMLElement ? getOwnerDocument(element) : document;\n  return doc.activeElement === element;\n}\n\nexport function focus(element, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var {\n    isActive = getActiveElement,\n    nextTick = true,\n    preventScroll\n  } = options;\n  if (isActive(element)) return -1;\n\n  function triggerFocus() {\n    if (supportsPreventScroll()) {\n      element.focus({\n        preventScroll\n      });\n    } else {\n      element.focus();\n\n      if (preventScroll) {\n        var scrollableElements = getScrollableElements(element);\n        restoreScrollPosition(scrollableElements);\n      }\n    }\n\n    if (isInputElement(element)) {\n      element.select();\n    }\n  }\n\n  if (nextTick) {\n    return requestAnimationFrame(triggerFocus);\n  }\n\n  triggerFocus();\n  return -1;\n}\nvar supportsPreventScrollCached = null;\n\nfunction supportsPreventScroll() {\n  if (supportsPreventScrollCached == null) {\n    supportsPreventScrollCached = false;\n\n    try {\n      var div = document.createElement(\"div\");\n      div.focus({\n        get preventScroll() {\n          supportsPreventScrollCached = true;\n          return true;\n        }\n\n      });\n    } catch (e) {// Ignore\n    }\n  }\n\n  return supportsPreventScrollCached;\n}\n\nfunction getScrollableElements(element) {\n  var doc = getOwnerDocument(element);\n  var parent = element.parentNode;\n  var scrollableElements = [];\n  var rootScrollingElement = doc.scrollingElement || doc.documentElement;\n\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {\n      scrollableElements.push({\n        element: parent,\n        scrollTop: parent.scrollTop,\n        scrollLeft: parent.scrollLeft\n      });\n    }\n\n    parent = parent.parentNode;\n  }\n\n  if (rootScrollingElement instanceof HTMLElement) {\n    scrollableElements.push({\n      element: rootScrollingElement,\n      scrollTop: rootScrollingElement.scrollTop,\n      scrollLeft: rootScrollingElement.scrollLeft\n    });\n  }\n\n  return scrollableElements;\n}\n\nfunction restoreScrollPosition(scrollableElements) {\n  for (var {\n    element,\n    scrollTop,\n    scrollLeft\n  } of scrollableElements) {\n    element.scrollTop = scrollTop;\n    element.scrollLeft = scrollLeft;\n  }\n}","map":{"version":3,"sources":["../../src/focus.ts"],"names":["isHTMLElement","element","doc","getOwnerDocument","options","isActive","nextTick","preventScroll","supportsPreventScroll","scrollableElements","getScrollableElements","restoreScrollPosition","isInputElement","requestAnimationFrame","triggerFocus","supportsPreventScrollCached","div","document","parent","rootScrollingElement","scrollTop","scrollLeft"],"mappings":"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","sourcesContent":["// Original licensing for the following methods can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/calvellido/focus-options-polyfill\n// See https://github.com/adobe/react-spectrum\n\nimport { getOwnerDocument } from \"./dom\"\nimport { isHTMLElement } from \"./tabbable\"\n\nexport interface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nfunction isInputElement(\n  element: FocusableElement,\n): element is HTMLInputElement {\n  return (\n    isHTMLElement(element) &&\n    element.tagName.toLowerCase() === \"input\" &&\n    \"select\" in element\n  )\n}\n\nfunction getActiveElement(element: FocusableElement) {\n  const doc =\n    element instanceof HTMLElement ? getOwnerDocument(element) : document\n  return doc.activeElement === (element as HTMLElement)\n}\n\ninterface FocusProps extends FocusOptions {\n  /**\n   * Function that determines if the element is the active element\n   */\n  isActive?: typeof getActiveElement\n  /**\n   * If true, the element will be focused in the next tick\n   */\n  nextTick?: boolean\n}\n\nexport function focus(element: FocusableElement, options: FocusProps = {}) {\n  const {\n    isActive = getActiveElement,\n    nextTick = true,\n    preventScroll,\n  } = options\n\n  if (isActive(element)) return -1\n\n  function triggerFocus() {\n    if (supportsPreventScroll()) {\n      element.focus({ preventScroll })\n    } else {\n      element.focus()\n      if (preventScroll) {\n        const scrollableElements = getScrollableElements(element as HTMLElement)\n        restoreScrollPosition(scrollableElements)\n      }\n    }\n\n    if (isInputElement(element)) {\n      element.select()\n    }\n  }\n\n  if (nextTick) {\n    return requestAnimationFrame(triggerFocus)\n  }\n\n  triggerFocus()\n  return -1\n}\n\nlet supportsPreventScrollCached: boolean | null = null\nfunction supportsPreventScroll() {\n  if (supportsPreventScrollCached == null) {\n    supportsPreventScrollCached = false\n    try {\n      const div = document.createElement(\"div\")\n      div.focus({\n        get preventScroll() {\n          supportsPreventScrollCached = true\n          return true\n        },\n      })\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  return supportsPreventScrollCached\n}\n\ninterface ScrollableElement {\n  element: HTMLElement\n  scrollTop: number\n  scrollLeft: number\n}\n\nfunction getScrollableElements(element: HTMLElement): ScrollableElement[] {\n  const doc = getOwnerDocument(element)\n  let parent = element.parentNode\n  const scrollableElements: ScrollableElement[] = []\n  const rootScrollingElement = doc.scrollingElement || doc.documentElement\n\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (\n      parent.offsetHeight < parent.scrollHeight ||\n      parent.offsetWidth < parent.scrollWidth\n    ) {\n      scrollableElements.push({\n        element: parent,\n        scrollTop: parent.scrollTop,\n        scrollLeft: parent.scrollLeft,\n      })\n    }\n    parent = parent.parentNode\n  }\n\n  if (rootScrollingElement instanceof HTMLElement) {\n    scrollableElements.push({\n      element: rootScrollingElement,\n      scrollTop: rootScrollingElement.scrollTop,\n      scrollLeft: rootScrollingElement.scrollLeft,\n    })\n  }\n\n  return scrollableElements\n}\n\nfunction restoreScrollPosition(scrollableElements: ScrollableElement[]) {\n  for (const { element, scrollTop, scrollLeft } of scrollableElements) {\n    element.scrollTop = scrollTop\n    element.scrollLeft = scrollLeft\n  }\n}\n"]},"metadata":{},"sourceType":"module"}