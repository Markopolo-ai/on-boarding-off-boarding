{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { Collection } from 'before-after-hook';\nimport { request } from '@octokit/request';\nimport { withCustomRequest } from '@octokit/graphql';\nimport { createTokenAuth } from '@octokit/auth-token';\nconst VERSION = \"3.3.0\";\n\nclass Octokit {\n  constructor(options = {}) {\n    const hook = new Collection();\n    const requestDefaults = {\n      baseUrl: request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    }; // prepend default user agent with `options.userAgent` if set\n\n    requestDefaults.headers[\"user-agent\"] = [options.userAgent, `octokit-core.js/${VERSION} ${getUserAgent()}`].filter(Boolean).join(\" \");\n\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n\n    this.request = request.defaults(requestDefaults);\n    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    this.hook = hook; // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    // TODO: type `options.auth` based on `options.authStrategy`.\n\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        // (2)\n        const auth = createTokenAuth(options.auth); // @ts-ignore  ¯\\_(ツ)_/¯\n\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const {\n        authStrategy,\n        ...otherOptions\n      } = options;\n      const auth = authStrategy(Object.assign({\n        request: this.request,\n        log: this.log,\n        // we pass the current octokit instance as well as its constructor options\n        // to allow for authentication strategies that return a new octokit instance\n        // that shares the same internal state as the current one. The original\n        // requirement for this was the \"event-octokit\" authentication strategy\n        // of https://github.com/probot/octokit-auth-probot.\n        octokit: this,\n        octokitOptions: otherOptions\n      }, options.auth)); // @ts-ignore  ¯\\_(ツ)_/¯\n\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    } // apply plugins\n    // https://stackoverflow.com/a/16345172\n\n\n    const classConstructor = this.constructor;\n    classConstructor.plugins.forEach(plugin => {\n      Object.assign(this, plugin(this, options));\n    });\n  }\n\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor(...args) {\n        const options = args[0] || {};\n\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n\n        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n          userAgent: `${options.userAgent} ${defaults.userAgent}`\n        } : null));\n      }\n\n    };\n    return OctokitWithDefaults;\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n\n\n  static plugin(...newPlugins) {\n    var _a;\n\n    const currentPlugins = this.plugins;\n    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);\n    return NewOctokit;\n  }\n\n}\n\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\nexport { Octokit };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/index.js"],"names":[],"mappings":"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","sourcesContent":["export const VERSION = \"3.3.0\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { Collection } from \"before-after-hook\";\nimport { request } from \"@octokit/request\";\nimport { withCustomRequest } from \"@octokit/graphql\";\nimport { createTokenAuth } from \"@octokit/auth-token\";\nimport { VERSION } from \"./version\";\nexport class Octokit {\n    constructor(options = {}) {\n        const hook = new Collection();\n        const requestDefaults = {\n            baseUrl: request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                // @ts-ignore internal usage only, no need to type\n                hook: hook.bind(null, \"request\"),\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\",\n            },\n        };\n        // prepend default user agent with `options.userAgent` if set\n        requestDefaults.headers[\"user-agent\"] = [\n            options.userAgent,\n            `octokit-core.js/${VERSION} ${getUserAgent()}`,\n        ]\n            .filter(Boolean)\n            .join(\" \");\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = request.defaults(requestDefaults);\n        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: () => { },\n            info: () => { },\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n        }, options.log);\n        this.hook = hook;\n        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n        // (2) If only `options.auth` is set, use the default token authentication strategy.\n        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n        // TODO: type `options.auth` based on `options.authStrategy`.\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                // (1)\n                this.auth = async () => ({\n                    type: \"unauthenticated\",\n                });\n            }\n            else {\n                // (2)\n                const auth = createTokenAuth(options.auth);\n                // @ts-ignore  ¯\\_(ツ)_/¯\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        }\n        else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions,\n            }, options.auth));\n            // @ts-ignore  ¯\\_(ツ)_/¯\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        // apply plugins\n        // https://stackoverflow.com/a/16345172\n        const classConstructor = this.constructor;\n        classConstructor.plugins.forEach((plugin) => {\n            Object.assign(this, plugin(this, options));\n        });\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args) {\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent\n                    ? {\n                        userAgent: `${options.userAgent} ${defaults.userAgent}`,\n                    }\n                    : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin(...newPlugins) {\n        var _a;\n        const currentPlugins = this.plugins;\n        const NewOctokit = (_a = class extends this {\n            },\n            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),\n            _a);\n        return NewOctokit;\n    }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n"]},"metadata":{},"sourceType":"module"}