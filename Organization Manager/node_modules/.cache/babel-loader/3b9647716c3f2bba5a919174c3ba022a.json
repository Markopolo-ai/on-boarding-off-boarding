{"ast":null,"code":"async function auth(token) {\n  const tokenType = token.split(/\\./).length === 3 ? \"app\" : /^v\\d+\\./.test(token) ? \"installation\" : \"oauth\";\n  return {\n    type: \"token\",\n    token: token,\n    tokenType\n  };\n}\n/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\n\n\nfunction withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n\n  return `token ${token}`;\n}\n\nasync function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(route, parameters);\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n  return request(endpoint);\n}\n\nconst createTokenAuth = function createTokenAuth(token) {\n  if (!token) {\n    throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n  }\n\n  if (typeof token !== \"string\") {\n    throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n  }\n\n  token = token.replace(/^(token|bearer) +/i, \"\");\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token)\n  });\n};\n\nexport { createTokenAuth };","map":{"version":3,"sources":["../dist-src/auth.js","../dist-src/with-authorization-prefix.js","../dist-src/hook.js","../dist-src/index.js"],"names":[],"mappings":"AAAO,eAAe,IAAf,CAAoB,KAApB,EAA2B;AAC9B,QAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB,KAA6B,CAA7B,GACZ,KADY,GAEZ,UAAU,IAAV,CAAe,KAAf,IACI,cADJ,GAEI,OAJV;AAKA,SAAO;AACH,IAAA,IAAI,EAAE,OADH;AAEH,IAAA,KAAK,EAAE,KAFJ;AAGH,IAAA;AAHG,GAAP;AAKJ;ACXA;AACA;AACA;AACA;AACA;;;AACO,SAAS,uBAAT,CAAiC,KAAjC,EAAwC;AAC3C,MAAI,KAAK,CAAC,KAAN,CAAY,IAAZ,EAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAChC,WAAQ,UAAS,KAAM,EAAvB;AACH;;AACD,SAAQ,SAAQ,KAAM,EAAtB;AACH;;ACTM,eAAe,IAAf,CAAoB,KAApB,EAA2B,OAA3B,EAAoC,KAApC,EAA2C,UAA3C,EAAuD;AAC1D,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,CAAiB,KAAjB,CAAuB,KAAvB,EAA8B,UAA9B,CAAjB;AACA,EAAA,QAAQ,CAAC,OAAT,CAAiB,aAAjB,GAAiC,uBAAuB,CAAC,KAAD,CAAxD;AACA,SAAO,OAAO,CAAC,QAAD,CAAd;AACH;;ACHW,MAAC,eAAe,GAAG,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC3D,MAAI,CAAC,KAAL,EAAY;AACR,UAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACH;;AACD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAM,IAAI,KAAJ,CAAU,uEAAV,CAAN;AACH;;AACD,EAAA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,oBAAd,EAAoC,EAApC,CAAR;AACA,SAAO,MAAM,CAAC,MAAP,CAAc,IAAI,CAAC,IAAL,CAAU,IAAV,EAAgB,KAAhB,CAAd,EAAsC;AACzC,IAAA,IAAI,EAAE,IAAI,CAAC,IAAL,CAAU,IAAV,EAAgB,KAAhB;AADmC,GAAtC,CAAP;AAGH,CAXW","sourcesContent":["export async function auth(token) {\n    const tokenType = token.split(/\\./).length === 3\n        ? \"app\"\n        : /^v\\d+\\./.test(token)\n            ? \"installation\"\n            : \"oauth\";\n    return {\n        type: \"token\",\n        token: token,\n        tokenType\n    };\n}\n","/**\n * Prefix token for usage in the Authorization header\n *\n * @param token OAuth token or JSON Web Token\n */\nexport function withAuthorizationPrefix(token) {\n    if (token.split(/\\./).length === 3) {\n        return `bearer ${token}`;\n    }\n    return `token ${token}`;\n}\n","import { withAuthorizationPrefix } from \"./with-authorization-prefix\";\nexport async function hook(token, request, route, parameters) {\n    const endpoint = request.endpoint.merge(route, parameters);\n    endpoint.headers.authorization = withAuthorizationPrefix(token);\n    return request(endpoint);\n}\n","import { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nexport const createTokenAuth = function createTokenAuth(token) {\n    if (!token) {\n        throw new Error(\"[@octokit/auth-token] No token passed to createTokenAuth\");\n    }\n    if (typeof token !== \"string\") {\n        throw new Error(\"[@octokit/auth-token] Token passed to createTokenAuth is not a string\");\n    }\n    token = token.replace(/^(token|bearer) +/i, \"\");\n    return Object.assign(auth.bind(null, token), {\n        hook: hook.bind(null, token)\n    });\n};\n"]},"metadata":{},"sourceType":"module"}