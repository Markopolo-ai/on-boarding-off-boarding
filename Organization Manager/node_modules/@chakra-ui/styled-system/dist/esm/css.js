import { isObject, mergeWith as merge, runIfFn } from "@chakra-ui/utils";
import { pseudoSelectors } from "./pseudos";
import { systemProps as systemPropConfigs } from "./system";
export var expandResponsive = styles => theme => {
  if (!theme.__breakpoints) return styles;
  var {
    isResponsive,
    toArrayValue,
    media: medias
  } = theme.__breakpoints;
  var computedStyles = {};

  for (var key in styles) {
    var value = runIfFn(styles[key], theme);
    if (value == null) continue;
    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;

    if (!Array.isArray(value)) {
      computedStyles[key] = value;
      continue;
    }

    var queries = value.slice(0, medias.length).length;

    for (var index = 0; index < queries; index += 1) {
      var media = medias == null ? void 0 : medias[index];

      if (!media) {
        computedStyles[key] = value[index];
        continue;
      }

      computedStyles[media] = computedStyles[media] || {};

      if (value[index] == null) {
        continue;
      }

      computedStyles[media][key] = value[index];
    }
  }

  return computedStyles;
};
export function getCss(options) {
  var {
    configs = {},
    pseudos = {},
    theme
  } = options;

  var css = function css(stylesOrFn, nested) {
    if (nested === void 0) {
      nested = false;
    }

    var _styles = runIfFn(stylesOrFn, theme);

    var styles = expandResponsive(_styles)(theme);
    var computedStyles = {};

    for (var k in styles) {
      var _config$transform, _config, _config2, _config3, _config4, _config5, _config6, _config7;

      var valueOrFn = styles[k];
      var value = runIfFn(valueOrFn, theme);
      var key = k in pseudos ? pseudos[k] : k;
      var config = configs[key];

      if (config === true) {
        config = {
          property: key
        };
      }

      if (isObject(value)) {
        computedStyles[key] = css(value, true);
        continue;
      }

      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme)) != null ? _config$transform : value;
      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;

      if ((_config3 = config) != null && _config3.property) {
        config.property = runIfFn(config.property, theme);
      }

      if (!nested && (_config4 = config) != null && _config4.static) {
        var staticStyles = runIfFn(config.static, theme);
        computedStyles = merge({}, computedStyles, staticStyles);
      }

      if ((_config5 = config) != null && _config5.property && Array.isArray((_config6 = config) == null ? void 0 : _config6.property)) {
        for (var property of config.property) {
          computedStyles[property] = rawValue;
        }

        continue;
      }

      if ((_config7 = config) != null && _config7.property) {
        if (config.property === "&" && isObject(rawValue)) {
          computedStyles = merge({}, computedStyles, rawValue);
        } else {
          computedStyles[config.property] = rawValue;
        }

        continue;
      }

      if (isObject(rawValue)) {
        computedStyles = merge({}, computedStyles, rawValue);
        continue;
      }

      computedStyles[key] = rawValue;
    }

    return computedStyles;
  };

  return css;
}
export var css = styles => theme => {
  var cssFn = getCss({
    theme,
    pseudos: pseudoSelectors,
    configs: systemPropConfigs
  });
  return cssFn(styles);
};
//# sourceMappingURL=css.js.map